plugins {
    id 'java'
    id 'jacoco'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id "com.google.protobuf" version "0.8.12"
}

repositories {
    mavenCentral()
    maven {
        url 'https://repo.gradle.org/gradle/libs-releases'
    }
}

// sourceCompatibility = 1.8
// targetCompatibility = 1.8

def grpcVersion = '1.27.1'
def protobufVersion = '3.11.4'
def protocVersion = protobufVersion

dependencies {
    annotationProcessor "com.google.dagger:dagger-compiler:2.26"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    compile 'org.gradle:gradle-tooling-api:6.1.1'
    compile "org.java-websocket:Java-WebSocket:1.4.0"
    compile "com.google.dagger:dagger:2.26"
    compileOnly "javax.annotation:javax.annotation-api:1.2"
    runtimeOnly 'org.slf4j:slf4j-simple:1.7.30'
    runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"
    testImplementation "io.grpc:grpc-testing:${grpcVersion}"
    testImplementation 'junit:junit:4.13'
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

shadowJar {
    // minimize()
}

sourceSets {
    libsDirName = 'lib'
    main {
        // proto {
        //     srcDir '../proto'
        // }
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
    generated {
        java.srcDirs = [
            "${buildDir}/generated/sources/annotationProcessor/java/main"
        ]
    }
}

// Use CreateStartScripts to generate a start script of the shadowjar file.
// This is done to match the gradle wrapper start script.
task customStartScripts(type: CreateStartScripts) {
    dependsOn shadowJar
    outputDir = file('build/customScripts')
    mainClassName = 'com.github.badsyntax.gradletasks.Application'
    applicationName = project.name
    classpath = files(shadowJar.outputs.files)
    unixStartScriptGenerator.template = resources.text.fromFile('startScriptTemplates/unixStartScript.txt')
    windowsStartScriptGenerator.template = resources.text.fromFile('startScriptTemplates/windowsStartScript.txt')
}

// Move shadowjar and start scripts input parent dist dir
task generateLib(type: Copy) {
    dependsOn build, customStartScripts

    from file("$buildDir/lib/${project.name}-all.jar")
    into file("$buildDir/../../lib/${project.name}-all.jar")

    from "$buildDir/customScripts/${project.name}", "$buildDir/customScripts/${project.name}.bat"
    into "$buildDir/../../lib"
}
