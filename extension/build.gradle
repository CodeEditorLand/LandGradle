description = 'vscode-gradle :: extension'

sourceSets {
  main {
    proto {
      srcDir file('../proto')
    }
  }
}

protobuf {
    plugins {
        grpc {
            path = file("./node_modules/.bin/grpc_tools_node_protoc_plugin")
        }
        ts {
            path = file("./node_modules/.bin/protoc-gen-ts")
        }
    }
    generateProtoTasks {
        generateTestProto.enabled = false
        extractProto.enabled = false;
        extractIncludeProto.enabled = false;
        extractIncludeTestProto.enabled = false;
        generateProto.finalizedBy copyProtoJs, copyProtoTs
        all().each { task ->
            task.plugins {
                grpc {
                    outputSubDir = 'js'
                }
                ts {
                    option 'service=grpc-node'
                }
            }
            task.builtins {
                remove java
                js {
                    option 'import_style=commonjs'
                }
            }
            task.dependsOn npmInstall
        }
    }
}

test.enabled = false;
jar.enabled = false;
compileJava.enabled = false
compileTestJava.enabled = false

clean {
  dependsOn ':tasks-server:clean'
  delete protobuf.generatedFilesBaseDir
  delete file('node_modules')
  delete file('src/proto')
  delete file('out')
}

task copyProtoJs(type: Copy) {
  dependsOn ':extension:generateProto'
  group 'copy'
  description 'Copies proto JavaScript definitions into src dir'
  from "$protobuf.generatedFilesBaseDir/main/js"
  into 'out/proto/'
  filter { line ->
    line.replaceAll("\'grpc\'", "\'@grpc/grpc-js\'")
  }
}

task copyProtoTs(type: Copy) {
  dependsOn ':extension:generateProto'
  group 'copy'
  description 'Copies proto TypeScript definitions into src dir'
  from "$protobuf.generatedFilesBaseDir/main/ts"
  into 'src/proto/'
  filter { line ->
    line.replaceAll('from \"grpc\"', 'from \"@grpc/grpc-js\"')
  }
}

task npmInstall(type: Exec) {
  description 'Installs node dependencies'
  inputs.file("package-lock.json")
  outputs.dir("node_modules")
  commandLine "npm", "install"
}

task lint(type: Exec) {
  description 'Lints source files'
  commandLine "npm", "run", "lint"
}

task format(type: Exec) {
  description 'Formats source files'
  commandLine "npm", "run", "lint:fix"
}

task buildTypeScript(type: Exec) {
  dependsOn build, copyProtoJs, copyProtoTs
  group 'build'
  description 'Builds TypeScript source files'
  buildDir = 'out'
  outputs.dir("$buildDir")
  commandLine "npm", "run", "compile:ts"
}

task watchTypeScript(type: Exec) {
  dependsOn build, copyProtoJs, copyProtoTs
  group 'build'
  description 'Watches and builds TypeScript source files'
  commandLine "npm", "run", "watch:ts"
}

build.dependsOn ':tasks-server:build', npmInstall
build.finalizedBy buildTypeScript
