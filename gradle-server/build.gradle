plugins {
  id 'java'
  id 'application'
}

description = 'vscode-gradle :: gradle-server'

java {
  sourceCompatibility = JavaVersion.VERSION_17
  targetCompatibility = JavaVersion.VERSION_17
}

dependencies {
  implementation project(":gradle-plugin-api")
  implementation files('build/libs/server.jar')
  implementation fileTree(dir: 'build/libs/runtime', include: ['*.jar'], exclude: ['gradle-tooling-api-*.jar',
  'slf4j-api-*.jar'])
  implementation("org.gradle:gradle-tooling-api:${toolingAPIVersion}")
  implementation 'javax.annotation:javax.annotation-api:1.3.2'
  implementation "io.grpc:grpc-protobuf:${grpcVersion}"
  implementation "io.grpc:grpc-stub:${grpcVersion}"
  implementation 'io.github.g00fy2:versioncompare:1.4.1'
  implementation files('build/libs/ls-fat-jar.jar')
  runtimeOnly "io.grpc:grpc-netty:${grpcVersion}"
  runtimeOnly 'org.slf4j:slf4j-simple:2.0.0-alpha6'
  testImplementation "io.grpc:grpc-testing:${grpcVersion}"
  testImplementation 'junit:junit:4.13.1'
  testImplementation 'org.powermock:powermock-module-junit4:2.0.9'
  testImplementation 'org.powermock:powermock-api-mockito2:2.0.7'
}

def mainJavaDir = 'src/main/java';
def mainResourcesDir = 'src/main/resources';
def libsDir = '../extension/lib';

sourceSets {
  libsDirName = file(libsDir)
  main {
    proto {
      srcDir file('../proto')
    }
    java {
      srcDirs mainJavaDir
      srcDirs 'build/generated/source/proto/main/grpc'
      srcDirs 'build/generated/source/proto/main/java'
    }
    resources {
      srcDirs mainResourcesDir
    }
  }
}

protobuf {
  plugins {
    grpc {
      // for apple m1, please add protoc_platform=osx-x86_64 in $HOME/.gradle/gradle.properties
      if (project.hasProperty('protoc_platform')) {
        artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}:${protoc_platform}"
      } else {
        artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
      }
    }
  }
  generateProtoTasks {
    generateTestProto.enabled = false
    extractProto.enabled = false;
    extractIncludeProto.enabled = false;
    extractIncludeTestProto.enabled = false;
    all().each { task ->
      task.plugins {
        grpc {}
      }
      task.builtins {
        remove distribution
      }
    }
  }
}

clean {
  delete protobuf.generatedFilesBaseDir
  delete libsDir
}

jar {
  manifest {
    attributes(
      "Class-Path": configurations.runtimeClasspath.collect { it.getName() }.join(' '))
  }
}

application {
  mainClass = 'com.github.badsyntax.gradle.GradleServer'
}

startScripts.enabled = false
jar.enabled = true
distZip.enabled = false
distTar.enabled = false

spotless {
  java {
    importOrder()
    eclipse()
    removeUnusedImports()
    trimTrailingWhitespace()
    targetExclude "build/**"
  }
}

task serverStartScripts(type: CreateStartScripts) {
  dependsOn jar
  dependsOn 'copyRuntimeLibs'
  outputDir = file(libsDir)
  mainClass = 'com.github.badsyntax.gradle.GradleServer'
  applicationName = project.name
  classpath = jar.outputs.files
  defaultJvmOpts = ["-Dfile.encoding=UTF-8"]
  unixStartScriptGenerator.template = resources.text.fromFile(
    "$mainResourcesDir/startScriptTemplates/unixStartScript.txt"
  )
  windowsStartScriptGenerator.template = resources.text.fromFile(
    "$mainResourcesDir/startScriptTemplates/windowsStartScript.txt"
  )
}

task copyRuntimeLibs(type: Copy) {
  into "../extension/lib"
  from configurations.runtimeClasspath
  duplicatesStrategy = 'exclude'
  mustRunAfter ':gradle-language-server:customFatJar'
}

project.tasks.named("processResources") {
  dependsOn(':gradle-plugin:copyJar')
  duplicatesStrategy = 'include'
}

test {
    jvmArgs '--add-opens=java.base/java.lang=ALL-UNNAMED',
    '--add-opens=java.base/java.util=ALL-UNNAMED',
    '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED',
    '--add-opens=java.base/java.nio.file=ALL-UNNAMED',
    '--add-opens=java.base/java.io=ALL-UNNAMED',
    '--add-opens=java.base/sun.nio.fs=ALL-UNNAMED'
}

compileJava.dependsOn 'generateProto', 'spotlessCheck', ':gradle-language-server:customFatJar'
assemble.dependsOn serverStartScripts
