plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

description = 'vscode-gradle :: tasks-server'

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile "org.gradle:gradle-tooling-api:${gradlingToolingApi}"
    compileOnly 'javax.annotation:javax.annotation-api:1.3.2'
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"
    runtimeOnly 'org.slf4j:slf4j-simple:2.0.0-alpha1'
    testImplementation "io.grpc:grpc-testing:${grpcVersion}"
    testImplementation 'junit:junit:4.13'
    testImplementation 'org.mockito:mockito-core:3.3.3'
}

def mainJavaDir = 'src/main/java';
def mainResourcesDir = 'src/main/resources';

sourceSets {
  libsDirName = file('../extension/lib')
  main {
    proto {
      srcDir file('../proto')
    }
    java {
      srcDirs mainJavaDir
      srcDirs 'build/generated/source/proto/main/grpc'
      srcDirs 'build/generated/source/proto/main/java'
    }
    resources {
      srcDirs mainResourcesDir
    }
  }
}

protobuf {
  plugins {
    grpc {
      artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
    }
  }
  generateProtoTasks {
    all().each { task ->
      task.plugins {
        grpc {}
      }
      task.builtins {
        remove distribution
      }
    }
  }
}

clean {
  delete protobuf.generatedFilesBaseDir
  delete libsDirName
}

shadowJar {
  classifier = null
  // https://github.com/grpc/grpc-java/issues/5794#issuecomment-497976351
  // minimize()
}

application {
  mainClassName = 'com.github.badsyntax.gradletasks.GradleTasksServer'
}

startScripts.enabled = false
jar.enabled = false
distZip.enabled = false
distTar.enabled = false
assemble.enabled = false;

task serverStartScripts(type: CreateStartScripts) {
  dependsOn shadowJar
  outputDir = file(libsDirName)
  mainClassName = 'com.github.badsyntax.gradletasks.GradleTasksServer'
  applicationName = project.name
  classpath = shadowJar.outputs.files
  unixStartScriptGenerator.template = resources.text.fromFile(
    "$mainResourcesDir/startScriptTemplates/unixStartScript.txt"
  )
  windowsStartScriptGenerator.template = resources.text.fromFile(
    "$mainResourcesDir/startScriptTemplates/windowsStartScript.txt"
  )
}

assemble.dependsOn serverStartScripts
